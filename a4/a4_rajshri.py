# -*- coding: utf-8 -*-
"""a4-Rajshri.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E9SM0FHe3QDSiqeAwXLoMt-0wmamqRS4
"""

pip install ucimlrepo

from ucimlrepo import fetch_ucirepo

# fetch dataset
wine_quality = fetch_ucirepo(id=186)

# data (as pandas dataframes)
X = wine_quality.data.features
y = wine_quality.data.targets

# metadata
print(wine_quality.metadata)

# variable information
print(wine_quality.variables)

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error

print(f'row information: {X.index}')
print(f'col information: {X.columns}')

whitewine_df=pd.read_csv('/content/winequality-white.csv', sep=';')
whitewine_df.head(15)
whitewine_df.describe()

correlation_matrix = whitewine_df.corr()
print(correlation_matrix)

sns.heatmap(correlation_matrix, annot=True)
plt.show()

quality_df=whitewine_df['quality']
sns.histplot(quality_df)
plt.xlabel('Wine Quality Score')
plt.ylabel('Frequency')
plt.title('Histogram of Wine Quality Scores')
plt.show()

sns.violinplot(data=whitewine_df, x='quality', y='fixed acidity', inner='quart')
plt.xlabel('Wine Quality Score')
plt.ylabel('Fixed Acidity')
plt.title('Violin Plot of Wine Quality Scores vs. Fixed Acidity Values')

plt.show()

sns.violinplot(data=whitewine_df, x='quality', y='volatile acidity', inner='quart')
plt.xlabel('Wine Quality Score')
plt.ylabel('Volatile Acidity')
plt.title('Violin Plot of Wine Quality Scores vs. Volatile Acidity Values')

plt.show()

sns.violinplot(data=whitewine_df, x='quality', y='citric acid', inner='quart')
plt.xlabel('Wine Quality Score')
plt.ylabel('Citric Acid')
plt.title('Violin Plot of Wine Quality Scores vs. Citric Acid Values')

plt.show()

sns.violinplot(data=whitewine_df, x='quality', y='residual sugar', inner='quart')
plt.xlabel('Wine Quality Score')
plt.ylabel('Residual Sugar')
plt.title('Violin Plot of Wine Quality Scores vs. Residual Sugar Values')

plt.show()

sns.violinplot(data=whitewine_df, x='quality', y='chlorides', inner='quart')
plt.xlabel('Wine Quality Score')
plt.ylabel('Chlorides')
plt.title('Violin Plot of Wine Quality Scores vs. Chlorides Values')

plt.show()

sns.violinplot(data=whitewine_df, x='quality', y='free sulfur dioxide', inner='quart')
plt.xlabel('Wine Quality Score')
plt.ylabel('Free Sulfur Dioxide')
plt.title('Violin Plot of Wine Quality Scores vs. Free Sulfur Dioxide Values')

plt.show()

sns.violinplot(data=whitewine_df, x='quality', y='total sulfur dioxide', inner='quart')
plt.xlabel('Wine Quality Score')
plt.ylabel('Total Sulfur Dioxide')
plt.title('Violin Plot of Wine Quality Scores vs. Total Sulfur Dioxide Values')

plt.show()

sns.violinplot(data=whitewine_df, x='quality', y='density', inner='quart')
plt.xlabel('Wine Quality Score')
plt.ylabel('Density')
plt.title('Violin Plot of Wine Quality Scores vs. Density Values')

plt.show()

sns.violinplot(data=whitewine_df, x='quality', y='pH', inner='quart')
plt.xlabel('Wine Quality Score')
plt.ylabel('pH')
plt.title('Violin Plot of Wine Quality Scores vs. pH Values')

plt.show()

sns.violinplot(data=whitewine_df, x='quality', y='sulphates', inner='quart')
plt.xlabel('Wine Quality Score')
plt.ylabel('Sulphates')
plt.title('Violin Plot of Wine Quality Scores vs. Sulphates Values')

plt.show()

sns.violinplot(data=whitewine_df, x='quality', y='alcohol', inner='quart')
plt.xlabel('Wine Quality Score')
plt.ylabel('Alcohol')
plt.title('Violin Plot of Wine Quality Scores vs. Alcohol Values')

plt.show()

"""

---


*********This is for single feature Linear Regression*********


---

"""

data = pd.read_csv('/content/winequality-white.csv', sep=';')
X = data['alcohol'] # Feature name
y = data['quality']  # Target name

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train = X_train.values.reshape(-1, 1) #converting to 2D array
X_test = X_test.values.reshape(-1, 1)   #converting to 2D array

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print("Mean squared error:", mean_squared_error(y_test, y_pred))
print("R-squared:", r2_score(y_test, y_pred))
print(f'b0 = {model.intercept_}')
print(f'b1 = {model.coef_[0]}')

plt.scatter(X_train, y_train,color='blue')
plt.plot(X_test, y_pred,color='red')
plt.xlabel('Alcohol')
plt.ylabel('Quality')
plt.title('Linear Regression Model')

plt.show()

"""

---


***********This is the 2nd part - for multifeature linear regression.***********

---

"""

data = pd.read_csv('/content/winequality-white.csv', sep=';')
X = data[['volatile acidity', 'alcohol', 'density']] #feature names
y = data['quality'] #target name

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print("Mean squared error:", mean_squared_error(y_test, y_pred))
print("R-squared:", r2_score(y_test, y_pred))
print(f'b0 = {model.intercept_}')
print(f'b1 = {model.coef_[0]}')
print(f'b2 = {model.coef_[1]}')
print(f'b3 = {model.coef_[2]}')